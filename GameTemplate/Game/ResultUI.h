#pragma once

class GameTimer;
class Game;
class InventoryUI;
class ResultUI :public IGameObject
{
public:
	//リザルトUIのステート
	enum enResultUIState
	{
		enResultUIState_Fade,		//フェード状態
		enResultUIState_Score,		//スコア表示状態
		enResultUIState_Evaluation,	//評価状態
		enResultUIState_FadeOut,	//フェードアウト状態
	};

	//リザルトUIの座標ステート
	enum ResultSetPos
	{
		Pos_OutSide,	//画面外
		Pos_InSide,		//画面内
		Pos_Slide,		//スライド中
	};

	ResultUI();
	~ResultUI();
	bool Start();
	void Update();
	void ScoreAdded(int addScore);
	void NextResultPosState();
	void Render(RenderContext& rc);

	/// <summary>
	/// リザルト表示が終了しているかの取得
	/// </summary>
	/// <returns></returns>
	bool& GetIsResultEnd()
	{
		return m_isResultEnd;
	}

	

private:
	Game* m_game = nullptr;									//ゲーム
	GameTimer* m_gameTimer = nullptr;						//ゲームタイマー
	ResultUI* m_resultUI = nullptr;							//リザルトUI
	SoundSource* m_finishSE = nullptr;						//フィニッシュ時の効果音
	enResultUIState m_resultUIState = enResultUIState_Fade;	//リザルトUIのステート
	ResultSetPos m_resultSetPosState = Pos_OutSide;			//リザルトUIの座標ステート
	
	SpriteRender m_finishSprite;		//フィニッシュ時のスプライト
	SpriteRender m_resultUI_Sprite;		//リザルトUIのスプライト
	SpriteRender m_clearSprite;			//ゲームクリアのスプライト
	SpriteRender m_failedSprite;		//ゲーム失敗のスプライト
	SpriteRender m_rankC_Sprite;		//ランクCのスプライト
	SpriteRender m_rankB_Sprite;		//ランクBのスプライト
	SpriteRender m_rankA_Sprite;		//ランクAのスプライト
	SpriteRender m_rankS_Sprite;		//ランクSのスプライト

	FontRender	m_nowScoreRender;		//現在のスコア表示用フォント
	
	float	   m_elapsedTime = 0.0f;	//経過時間

	Vector3		m_position = Vector3::Zero;	//座標
	Vector3		m_scale = Vector3::One;		//拡大率
	Vector3		m_nowScorePos = Vector3(400.0f, 730.0f, 0.0f);//現在のスコア表示の座標
	bool		m_isResultEnd = false;		//リザルト表示が終了しているか
	bool		m_isFinishSEPlayed = false;	//フィニッシュ時の効果音が再生してるか
	int			m_nowScore = 0.0f;			//現在のスコア

};

